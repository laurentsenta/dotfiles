set nocompatible               " be iMproved
filetype off                   " required by vundle

" ==== No Menus ===
set guioptions+=lrbmTLce
set guioptions-=lrbmTLce
set guioptions+=c

" ==== NO ENTERING EX MODE! ====
:map Q <Nop>


:set number         "line numbering

" === Status Line ===
:set laststatus=2   "display the statusline all the time
set statusline=%<\ %n:%f\ %m%r%y%{\"[\".(&fenc==\"\"?&enc:&fenc).\"]\ \"}%=%-35.(line:\ %l\ of\ %L,\ col:\ %c%V\ (%P)%)

" === Navigation ===
" Relative numbers
function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc
nnoremap <C-n> :call NumberToggle()<cr>
:au FocusLost * :set number
:au FocusGained * :set relativenumber

" ==== Vundle ====
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

" Bundles:
" * github
Bundle 'altercation/vim-colors-solarized'
Bundle 'scrooloose/nerdtree'
Bundle 'msanders/snipmate.vim'
Bundle 'scrooloose/syntastic'
Bundle 'kien/ctrlp.vim'
Bundle 'nvie/vim-flake8'
Bundle 'bling/vim-airline'
Bundle 'tpope/vim-fugitive'
Bundle 'techlivezheng/vim-plugin-minibufexpl'

" * vim-scripts repos
Bundle 'fs111/pydoc.vim'

" * non github repos
" Bundle 'git://git.wincent.com/command-t.git'

filetype plugin indent on     " required by vundle

" Brief help
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..

" === solarized ===
syntax enable
set background=dark
colorscheme solarized
:set guifont=Inconsolata\ 12

" === shortcut ===
:map <C-Q> :NERDTreeToggle<CR>
:imap <C-Q> <ESC>:NERDTreeToggle<CR>a

:map <C-B> :MBEToggle<CR>
:imap <C-B> <ESC>:MBEToggle<CR>a
:map <C-tab> :MBEbn<CR>
:imap <C-tab> <ESC>:MBEbn<CR>a
:map <C-S-tab> :MBEbp<CR>
:imap <C-S-tab> <ESC>:MBEbp<CR>a

:map <C-X> "+

:map <C-S> :w<CR>
:imap <C-S> <ESC>:w<CR>a

autocmd BufWritePre * :%s/\s\+$//e " remove trailing on save

" 80 col
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" Buffer navigation
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
map <c-d> \pW

" change the mapleader from \ to ,
let mapleader=","

" omnicompletion : words
inoremap <leader>, <C-x><C-o>

" omnicompletion : filenames
inoremap <leader>: <C-x><C-f>

" omnicompletion : lines
inoremap <leader>= <C-x><C-l>

:set so=7 " scrolloff (cursor is always 15lines away from border)
:set nowrap

:command Spell setlocal spell spelllang=en_us
" :imap <C-C> <ESC>]si
" :imap <C-X> <ESC>[si
" :imap <C-D> <ESC>z=i
" :map <C-C> ]s
" :map <C-X> [s
" :map <C-D> z=

" == Rainbow Parenthesis everywhere
" au VimEnter * RainbowParenthesesToggle
" au Syntax * RainbowParenthesesLoadRound
" au Syntax * RainbowParenthesesLoadSquare
" au Syntax * RainbowParenthesesLoadBraces
"
" let g:rbpt_colorpairs = [
"      \ ['red',         '#268bd2'],
"      \ ['Darkblue',    '#27d343'],
"      \ ['darkgray',    '#abd327'],
"      \ ['darkgreen',   '#d38327'],
"      \ ['darkcyan',    '#d327cd'],
"      \ ['darkmagenta', '#268bd2'],
"      \ ['brown',       '#27d343'],
"      \ ['gray',        '#abd327'],
"      \ ['black',       '#d38327'],
"      \ ['darkmagenta', '#d327cd'],
"      \ ]
"
" let g:rbpt_max = 12

" == clojure-static
" let g:clojure_align_multiline_strings = 1 " align multiline string on the quote


