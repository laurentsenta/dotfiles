"# Core Setup
set nocompatible               " be iMproved
filetype off                   " required by vundle

"## No Menus
set guioptions+=lrbmTLce
set guioptions-=lrbmTLce
set guioptions+=c

"No Ex Mode
:map Q <Nop>


" remove trailing on save
autocmd BufWritePre * :%s/\s\+$//e

" change the mapleader from \ to ,
let mapleader="."
let maplocalleader=","

" scrolloff (cursor is always 15lines away from border)
:set so=7
:set shiftwidth=4

:command Spell setlocal spell spelllang=en_us
:set nowrap
autocmd BufNewFile,BufReadPost *.md set filetype=markdown


"# Plugins with Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

"## System
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'msanders/snipmate.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'bling/vim-airline'
Plugin 'tpope/vim-fugitive' " git
Plugin 'scrooloose/syntastic'

"## Tols
Plugin 'vim-scripts/DrawIt'
Plugin 'lervag/vimtex'

"## Clojure
Plugin 'tpope/vim-fireplace'
" Plugin 'vim-scripts/paredit.vim'
" Plugin 'tpope/vim-surround'
" Plugin 'kien/rainbow_parentheses.vim'
Plugin 'venantius/vim-eastwood'
Plugin 'venantius/vim-cljfmt'

Plugin 'luochen1990/rainbow'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


"# Theming

syntax enable
set background=dark
colorscheme solarized
:set guifont=Inconsolata\ 18

"## 80 col line
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

"##  Status Line
:set laststatus=2   "display the statusline all the time
set statusline=%<\ %n:%f\ %m%r%y%{\"[\".(&fenc==\"\"?&enc:&fenc).\"]\ \"}%=%-35.(line:\ %l\ of\ %L,\ col:\ %c%V\ (%P)%)

"## Tab completion in cmd line
set wildmode=longest,list,full
set wildmenu


"## Syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0


"## Line Numbers
:set number         "line numbering
:set relativenumber

function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap <C-n> :call NumberToggle()<cr>

"# Bindings

"## Simplify

"system copy and paste
:map <C-X> "+

"when a IDE user takes your keyboard
:map <C-S> :w<CR>
:imap <C-S> <ESC>:w<CR>a

"## Features
:map <C-Q> :NERDTreeToggle<CR>
:imap <C-Q> <ESC>:NERDTreeToggle<CR>a

"## Buffer navigation
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" " omnicompletion : words
" inoremap <leader>, <C-x><C-o>
"
" " omnicompletion : filenames
" inoremap <leader>: <C-x><C-f>
"
" " omnicompletion : lines
" inoremap <leader>= <C-x><C-l>


" :imap <C-C> <ESC>]si
" :imap <C-X> <ESC>[si
" :imap <C-D> <ESC>z=i
" :map <C-C> ]s
" :map <C-X> [s
" :map <C-D> z=

" == Rainbow Parenthesis everywhere
" au VimEnter * RainbowParenthesesToggle
" au Syntax * RainbowParenthesesLoadRound
" au Syntax * RainbowParenthesesLoadSquare
" au Syntax * RainbowParenthesesLoadBraces
"
" let g:rbpt_colorpairs = [
"      \ ['red',         '#268bd2'],
"      \ ['Darkblue',    '#27d343'],
"      \ ['darkgray',    '#abd327'],
"      \ ['darkgreen',   '#d38327'],
"      \ ['darkcyan',    '#d327cd'],
"      \ ['darkmagenta', '#268bd2'],
"      \ ['brown',       '#27d343'],
"      \ ['gray',        '#abd327'],
"      \ ['black',       '#d38327'],
"      \ ['darkmagenta', '#d327cd'],
"      \ ]
"
" let g:rbpt_max = 12

" == clojure-static
" let g:clojure_align_multiline_strings = 1 " align multiline string on the quote


